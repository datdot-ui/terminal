const bel = require('bel')
const style_sheet = require('support-style-sheet')
const i_button = require('datdot-ui-button')
const i_dropdown = require('datdot-ui-dropdown')
const message_maker = require('message-maker')
const make_grid = require('./make-grid')

var id = 0

module.exports = footer

function footer (opts = {}, parent_protocol) {
// --------------------------------------------
    const myaddress = `${__filename}-${id++}`
    const inbox = {}
    const outbox = {}
    const recipients = {}
    const names = {}
    const message_id = to => (outbox[to] = 1 + (outbox[to]||0))

    const {notify, address} = parent_protocol(myaddress, listen)
    names[address] = recipients['parent'] = { name: 'parent', notify, address, make: message_maker(myaddress) }
    notify(recipients['parent'].make({ to: address, type: 'ready', refs: {} }))

    function make_protocol (name) {
        return function protocol (address, notify) {
            names[address] = recipients[name] = { name, address, notify, make: message_maker(myaddress) }
            return { notify: listen, address: myaddress }
        }
    }
    
    function listen (msg) {
        const { head, refs, type, data, meta } = msg // receive msg
        inbox[head.join('/')] = msg                  // store msg
        const [from, to] = head
        console.log('FOOTER', { type, msg })
        // handle
        const { notify, address, make } = recipients['parent']
        if (type.match(/ready|click|changed|selected|unselected/)) notify(make({ to: address, type, data }))
        if (type === 'messages-count') return num.textContent = data
        if (type === 'click') return click_event (from, type, data)
    }

// --------------------------------------------
    const { name } = opts
    var num = bel`<span>0</span>`
    const { make } = recipients['parent']

    function widget () {
        const footer = document.createElement('i-footer')
        const shadow = footer.attachShadow({mode: 'closed'})
        footer.setAttribute('aria-label', `${name}-footer`)
        style_sheet(shadow, style)
        const theme_option = {
            message: {
                size: 'var(--size12)',
            },
            button: {
                padding: '2px 4px',
                border_radius: '0',
            }
        }
        const filter = bel`<input class="filter" type='text' name='filter' placeholder='Filter' aria-label='search filter'>`
        const clear = i_button({ name: 'clear-filter', icons: { icon: {name: 'cross'} },
            theme: {
                props: {
                    icon_fill: 'var(--color-grey66)',
                    icon_fill_hover: 'var(--color-white)',
                    bg_color: 'var(--color-greyD9)',
                    bg_color_hover: 'var(--primary-bg-color-hover)',
                    border_width: '0',
                    border_radius: '50%',
                    icon_size: '9px',
                    icon_size_hover: '9px',
                    width: '12px',
                    height: '12px',
                    padding: '4px'
                }
            }
        }, make_protocol('clear-filter'))

        const search = bel`<div class="search">${filter}${clear}</div>`
        const expanded = i_button({ name: 'expanded', body: 'Collapsed', role: 'switch', theme: { props: { ...theme_option.button } } }, make_protocol('expanded'))

        // options for terminal-selector 
        const terminal_opts = { 
            name: 'terminal', 
            mode : 'listbox-single', 
            expanded: false, 
            button: { theme: { props: { border_radius: '0', padding: '2px 4px', } } },
            list: { direction: 'up', array: [{ text: 'Compact messages' }, { text: 'Comfortable messages', }], theme: { grid: { button: { auto: { auto_flow: 'column' }, justify: 'content-left', gap: '5px' } } } }
        }

        const terminal_selector = i_dropdown(terminal_opts, make_protocol(terminal_opts.name))
        const total = bel`<span class="total">All messages: ${num}</span>`
        const actions = bel`<div class="actions">${search}${terminal_selector}${expanded}</div>`
        shadow.append(total, actions)
        filter.addEventListener('keyup', handle_keyup_event)
        // to prevent fullsrceen event from fullscreen.js
        filter.addEventListener('keydown', (event) => event.stopPropagation())
        
        return footer
    }

    function handle_keyup_event (e) {
        const key = e.which || e.keyCode || e.keyCodeAt
        // if (key === 8) return
        let letter = e.target.value.toLowerCase()
        return notify(make({type: 'search-filter', data: {letter}}))
    }

    // handle events
    function switch_event (from, data) {
        const state = !data
        const text = state ? 'Expanded' : 'Collapsed'
        const { notify: from_notify, address: from_address, make: from_make } = names[from]
        from_notify(from_make({ to: from_address, type: 'switched', data: state }))
        from_notify(from_make({ to: from_address, type: 'changed', data: {text} }))
        notify(make({to: from, type: 'triggered', data: {checked: state}}) )
        notify(make({type: 'layout-mode', data: {expanded: state}}))
    }

    function selector_event (from, data) {
        const dropdowns = actions.querySelectorAll('i-dropdown')
        const state = data.expanded
        const type = state ? 'expanded' : 'collapsed'
        const to = `${from} / listbox / ui-list`
        recipients[from]( make({to, type, data: {from, expanded: state}}) )
        notify(make({to, type, data: {from, expanded: state}}) )
        dropdowns.forEach( item => {
            const name = item.getAttribute('aria-label')
            const to = `${name} / listbox / ui-list`
            item.style.zIndex = '99'
            if (name !== names[from].name) {
                const { notify: from_notify, address: from_address, make: from_make } = names[from]
                from_notify(from_make({ to: from_address, type: 'collapsed', data: {name, expanded: false }}) )
                notify(make({ to: address, type: 'collapsed', data: {name, expanded: false } }) )
                item.removeAttribute('style')
            }
        })
    }
    function clear_input_event () {
        if (filter.value === '') return
        filter.value = ''
        notify(make({to: `${name} / index.js`, type: 'cleared-search', data: ''}))
    }
    function click_event (from, type, data) {
        console.log('click event', {from, data, type} )
        const name = names[from].name
        if (name === 'switch') return switch_event(from, data)
        if (name === 'listbox') return selector_event(from, data)
        if (name === 'clear-filter') return clear_input_event()
    }   
    
    const style = `
    :host(i-footer) {
        --size: var(--size12);
        --color: var(--color-white);
        --bg-color: var(--color-dark);
        display: grid;
        font-size: var(--size);
        color: hsl(var(--color));
        background-color: hsl(var(--bg-color));
        ${make_grid({
            areas: ['actions total'],
        })}
        max-width: 100%;
    }
    .actions {
        grid-area: actions;
        display: grid;
        ${make_grid({
            rows: 'minmax(0, 30px) auto',
            columns: 'minmax(0, 200px) minmax(0, 175px) minmax(auto, 100px) 1fr',
            gap: '6px'
        })}
        padding: 6px;
    }
    .total {
        grid-area: total;
        ${make_grid({
            justify: 'self-right',
            align: 'self-center'
        })}
        padding: 0 12px;
    }
    .search {
        --bg-color: var(--color-white);
        display: grid;
        ${make_grid({
            columns: 'minmax(0, auto) 24px',
            align: 'items-center'
        })}
        background-color: hsl(var(--bg-color));
    }
    .search i-button {
        opacity: 0;
        transition: opacity .3s linear;
    }
    .search .filter:focus ~ i-button {
        opacity: 1;
    }
    .filter {
        border: none;
    }
    
    .filter:focus {
        outline: none;
    }
    .status {
        grid-area: status;
        padding: 0 8px 8px;
    }
    @media only screen and (max-width: 640px) {
        :host(i-footer) {
            ${make_grid({
                areas: ['total', 'actions'],
            })}
        }
        .total {
            ${make_grid({
                justify: 'self-left'
            })}
        }
    }
    `
    return widget()
}